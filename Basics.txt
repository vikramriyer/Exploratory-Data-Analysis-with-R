Lesson 1
What is EDA?
- Initial step before a very large process of predictive modelleling
- Convert data in words to numbers, charts to understand it better

Just looking at the numerical data doesnt give any idea as such about the data,but when we convert the data into some statistical charts like histogram, bar charts etc, the data starts making more sense and is easy to understand;  which is the major task of EDA

Goals of EDA
Goal 1
understand a certain metric or relations between data points in the given data set

Goal 2
assess and validate the prediction on which the future inferences will be based

Goal 3
Which tools to use to show the data is also very important

Tip: Look at data with Curiosity but also with Skepticism :)

Lesson 2
TPR FPR ROC AUC

Receiving Operating Characteristic, or ROC, is a visual way for inspecting the performance of a binary classifier (0/1). In particular, it's comparing the rate at which your classifier is making correct predictions (True Positives or TP) and the rate at which your classifier is making false alarms (False Positives or FP)

TPR = true positives/(true positives + false positives)
FPR = false positives/(true positives + false positives)

References:
http://blog.yhat.com/posts/roc-curves.html

Working with R
demistifying.r

setting up R
setting up Rstudio

setwd('/path/to/working/dir') => similar to cd
getwd() => similar to pwd

states <- read.csv("~/vikram-code-school/ND/P4/datasets/stateData.csv")
head(states, 5) => top 5 rows
subset(states, state.region == 1) => gets all the records where region == 1
states[states$region == 1,] => this gets same result as above subset


list of all the cars that have mpg greater than or equal to 30 and hp < 60
mtcars[mtcars$mpg >= 30 | mtcars$hp < 60, ]
subset(mtcars, mpg >= 30 | hp < 60)

ifelse:

> mtcars$wt
 [1] 2.620 2.875 2.320 3.215 3.440 3.460 3.570 3.190 3.150 3.440 3.440 4.070 3.730 3.780
[15] 5.250 5.424 5.345 2.200 1.615 1.835 2.465 3.520 3.435 3.840 3.845 1.935 2.140 1.513
[29] 3.170 2.770 3.570 2.780
cond <- mtcars$wt < 3      => this will return a boolean, for the entire dataframe, wherever the wt is < 3 it will return true
> cond
 [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[15] FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
[29] FALSE  TRUE FALSE  TRUE

> mtcars$weight_class <- ifelse(cond, 'light', 'average') => weight class will be new column added, if condition is met (true), then 'light' will be set as the corresponding value of weight_class field in mtcars, 
if not met (false), them 'average'
> mtcars$weight_class
 [1] "light"   "light"   "light"   "average" "average" "average" "average" "average"
 [9] "average" "average" "average" "average" "average" "average" "average" "average"
[17] "average" "light"   "light"   "light"   "light"   "average" "average" "average"
[25] "average" "light"   "light"   "light"   "average" "light"   "average" "light"  

> cond <- mtcars$wt > 3.5 
> mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
> mtcars$weight_class
 [1] "light"   "light"   "light"   "average" "average" "average" "heavy"   "average"
 [9] "average" "average" "average" "heavy"   "heavy"   "heavy"   "heavy"   "heavy"  
[17] "heavy"   "light"   "light"   "light"   "light"   "heavy"   "average" "heavy"  
[25] "heavy"   "light"   "light"   "light"   "average" "light"   "heavy"   "light" 

rm(cond)
rm(any variable that is loaded into memory using R)

Data types:

Vectors

> vector1 = c(1,2,-5,7,-1)
> vector1
[1]  1  2 -5  7 -1
> vector2 = c("a","b","c","d","e")
> vector2
[1] "a" "b" "c" "d" "e"
> vector1[1]
[1] 1
> vector1[c(1)]
[1] 1

* need to find the distinction between the above 2

Matrices

ex1
> matrix1 = matrix(1:20, nrow=5, ncol=4)
> matrix1
     [,1] [,2] [,3] [,4]
[1,]    1    6   11   16
[2,]    2    7   12   17
[3,]    3    8   13   18
[4,]    4    9   14   19
[5,]    5   10   15   20

ex2
> cells = c(1,2,4,9)
> rnames = c("r1","r2")
> cnames = c("c1","c2")
> matrix2 = (cells, nrow=2, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
Error: unexpected ',' in "matrix2 = (cells,"
* matrix keyword not used
> matrix2 = matrix(cells, nrow=2, ncol=2, byrow=TRUE, dimnames=list(rnames, cnames))
> 
> matrix2
   c1 c2
r1  1  2
r2  4  9

> matrix2[1]
[1] 1
> matrix2[1,]
c1 c2 
 1  2 
> matrix2[2,]
c1 c2 
 4  9 
> matrix2[,2]
r1 r2 
 2  9 

Arrays

Arrays are similar to matrices but can have more than two dimensions. See 
 => help(array)
for details.

Data Frames

> a = c(1,2,3)
> b = c("ram", "shyam", "ram-shyam")
> c = c("A+","B+","AB+")
> df = data.frame(a,b,c)
> names(df) = c("id", "name", "blood group")
> df
  id      name blood group
1  1       ram          A+
2  2     shyam          B+
3  3 ram-shyam         AB+

> df[1,2]
[1] ram
Levels: ram ram-shyam shyam
> df[[1,2]]
[1] ram
Levels: ram ram-shyam shyam
> df[[1:2]]
[1] 2
> df[[1:3]]
Error in .subset2(x, i, exact = exact) : 
  recursive indexing failed at level 2
> df[[1:1]]
[1] 1 2 3
> df[[1:0]]
Error in .subset2(x, i, exact = exact) : 
  attempt to select less than one element in integerOneIndex
> df[[2:3]]
[1] 2
> df[["name","blood group"]]
Error in `[[.default`(col, i, exact = exact) : subscript out of bounds
> df[c("name","blood group")]
       name blood group
1       ram          A+
2     shyam          B+
3 ram-shyam         AB+
> df$name
[1] ram       shyam     ram-shyam
Levels: ram ram-shyam shyam

List

ex1
> w <- list(name="Fred", mynumbers=a, mymatrix=matrix(1:4,nrow=2,ncol=2), age=5.3)
> w
$name
[1] "Fred"

$mynumbers
[1] 1 2 3

$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$age
[1] 5.3

ex2
> list1 <- list(name="Fred", mynumbers=c(4,5,6), mymatrix=matrix(1:3,nrow=3,ncol=3), age=38.5)
> list2 <- list(name="Flintoff", mynumbers=c(1,2,3), mymatrix=matrix(1:4,nrow=2,ncol=2), age=5.3)

> list1
$name
[1] "Fred"

$mynumbers
[1] 4 5 6

$mymatrix
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    2    2    2
[3,]    3    3    3

$age
[1] 38.5

> list2
$name
[1] "Flintoff"

$mynumbers
[1] 1 2 3

$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$age
[1] 5.3

> list_of_list_1_and_2 = list(list1,list2)
> list_of_list_1_and_2
[[1]]
[[1]]$name
[1] "Fred"

[[1]]$mynumbers
[1] 4 5 6

[[1]]$mymatrix
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    2    2    2
[3,]    3    3    3

[[1]]$age
[1] 38.5


[[2]]
[[2]]$name
[1] "Flintoff"

[[2]]$mynumbers
[1] 1 2 3

[[2]]$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

[[2]]$age
[1] 5.3

> list_of_list_1_and_2_v2 = c(list1,list2)
> list_of_list_1_and_2_v2
$name
[1] "Fred"

$mynumbers
[1] 4 5 6

$mymatrix
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    2    2    2
[3,]    3    3    3

$age
[1] 38.5

$name
[1] "Flintoff"

$mynumbers
[1] 1 2 3

$mymatrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$age
[1] 5.3

* Above both may look similar, but where try to check with the structure, its quite different
list_of_list_1_and_2_v2 -> actually is appending the two
list_of_list_1_and_2 -> is creating list of lists

> list_of_list_1_and_2_v2 = c(list1,list2)
> str(list_of_list_1_and_2_v2)
List of 8
 $ name     : chr "Fred"
 $ mynumbers: num [1:3] 4 5 6
 $ mymatrix : int [1:3, 1:3] 1 2 3 1 2 3 1 2 3
 $ age      : num 38.5
 $ name     : chr "Flintoff"
 $ mynumbers: num [1:3] 1 2 3
 $ mymatrix : int [1:2, 1:2] 1 2 3 4
 $ age      : num 5.3
> list_of_list_1_and_2 = list(list1,list2)
> str(list_of_list_1_and_2)

List of 2
 $ :List of 4
  ..$ name     : chr "Fred"
  ..$ mynumbers: num [1:3] 4 5 6
  ..$ mymatrix : int [1:3, 1:3] 1 2 3 1 2 3 1 2 3
  ..$ age      : num 38.5
 $ :List of 4
  ..$ name     : chr "Flintoff"
  ..$ mynumbers: num [1:3] 1 2 3
  ..$ mymatrix : int [1:2, 1:2] 1 2 3 4
  ..$ age      : num 5.3

Factors (lets study some statistical variables first to understand factors)

Categorical vars
gender: male, female
food: veg, non-veg

Ordinal variables (intrinsic ordering)
height: low, medium, high
speed: slow, average, fast

Interval variables
5-10, 10-15, 15-20

So, factors are statistical data type that stores categorical variables

uses: categorical modelling
storage: they are stored as vectors of integers with a set of character values

examples 
> gender = c(rep("male",20), rep("female", 30))
> gender
 [1] "male"   "male"   "male"   "male"   "male"   "male"   "male"   "male"  
 [9] "male"   "male"   "male"   "male"   "male"   "male"   "male"   "male"  
[17] "male"   "male"   "male"   "male"   "female" "female" "female" "female"
[25] "female" "female" "female" "female" "female" "female" "female" "female"
[33] "female" "female" "female" "female" "female" "female" "female" "female"
[41] "female" "female" "female" "female" "female" "female" "female" "female"
[49] "female" "female"
> gender <- factor(gender) 
> gender
 [1] male   male   male   male   male   male   male   male   male   male  
[11] male   male   male   male   male   male   male   male   male   male  
[21] female female female female female female female female female female
[31] female female female female female female female female female female
[41] female female female female female female female female female female
Levels: female male
> summary(gender)
female   male 
    30     20 


Difference between <- and =,
1. for variables assignments
a = 3 as well as a <- 3 are the same,
2. for a function call
f(a = 3) says that call f with the value of the argument 'x' set to 3
f(a <- 3) says that assign a variable during a function call -> this is very rare and should be avoided

what to use then?
what ever we prefer, i will always use '='